export declare type Translation = {
    [key: string]: string;
};
export declare type Component = StringComponent | TranslationComponent | string;
interface Shared {
    bold?: boolean;
    italic?: boolean;
    underlined?: boolean;
    strikethrough?: boolean;
    obfuscated?: boolean;
    color?: string;
    insertion?: string;
    clickEvent?: any;
    hoverEvent?: any;
    extra?: Component[];
}
export interface StringComponent extends Shared {
    text: string;
}
export interface TranslationComponent extends Shared {
    translate: string;
    with?: Component[];
}
interface FormatOptions extends ConvertOptions {
    useAnsiCodes?: boolean;
    maxLineLength?: number;
}
/**
 * Converts a Minecraft chat component to a formatted string.
 * */
export declare function format(component: Component, options?: FormatOptions): string;
interface ConvertOptions {
    translation?: Translation;
    stripNonText?: boolean;
    keepOld?: boolean;
}
/**
 * Applies translations to a [Chat component](https://wiki.vg/Chat) and converts
 * it to `StringComponent`.
*/
export declare function convert(component: Component, options?: ConvertOptions): StringComponent;
/**
 * Converts a string formatted using the old formatting scheme
 * to the current JSON chat system.
*/
export declare function convertOld(text: string): StringComponent;
/** Flattens a nested `StringComponent`. */
export declare function flatten(component: StringComponent): StringComponent[];
/** Converts a `StringComponent` to plain text and can format it using ANSI codes. */
export declare function formatString(component: StringComponent, useAnsiCodes?: boolean): string;
/** @deprecated Use `format(convert(component))` instead */
export declare function chatToText(component: Component, translation?: Translation): string;
export {};
