/// <reference types="node" />
import * as net from "net";
import { Emitter } from "./events";
import { Connection } from ".";
export interface ServerOptions {
    keepAlive?: boolean;
    keepAliveInterval?: number;
    generateKeyPair?: boolean;
}
declare type ClientHandler = (client: ServerConnection) => Promise<any> | void;
interface Events {
    connection: (client: ServerConnection) => void;
    error: (error?: any) => void;
}
export declare class Server extends Emitter<Events> {
    static encrypt(client: Connection, publicKey: Buffer, privateKey: string, username: string, verify?: boolean): Promise<void>;
    options: Required<ServerOptions>;
    server: net.Server;
    privateKey?: string;
    publicKey?: Buffer;
    constructor(handler?: ClientHandler);
    constructor(options?: ServerOptions, handler?: ClientHandler);
    listen(port: number, host?: string): Promise<this>;
    close(): Promise<void>;
}
export declare class ServerConnection extends Connection {
    server: Server;
    constructor(socket: net.Socket, server: Server);
    private startKeepAlive;
    encrypt(username: string, verify?: boolean): Promise<void>;
}
export declare function generateKeyPair(): import("crypto").KeyPairSyncResult<Buffer, string>;
export {};
