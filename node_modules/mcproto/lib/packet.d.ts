/// <reference types="node" />
import * as nbt from "nbt-ts";
export declare type Packet = PacketReader | PacketWriter | Buffer;
export declare const getPacketIdMap: (v: number) => {
    keepAliveC: number;
    keepAliveS: number;
};
export interface Position {
    x: number;
    y: number;
    z: number;
}
export declare class PacketReader {
    buffer: Buffer;
    protocol: number;
    id: number;
    offset: number;
    constructor(buffer: Buffer, protocol?: number);
    clone(): PacketReader;
    read(length: number): Buffer;
    readString(): string;
    readJSON(): any;
    readBool(): boolean;
    readInt8(): number;
    readUInt8(): number;
    readInt16(): number;
    readUInt16(): number;
    readInt32(): number;
    readUInt32(): number;
    readInt64(): bigint;
    readUInt64(): bigint;
    readFloat(): number;
    readDouble(): number;
    readVarInt(): number;
    readVarLong(): bigint;
    readPosition(): Position;
    readNBT(options?: nbt.DecodeOptions): nbt.DecodeResult;
}
export declare class PacketWriter {
    id: number;
    protocol: number;
    buffer: Buffer;
    offset: number;
    constructor(id: number, protocol?: number);
    private extend;
    write(buffer: Buffer): this;
    writeString(string: string): this;
    writeJSON(json: any): this;
    writeBool(bool: boolean): this;
    writeInt8(x: number): this;
    writeUInt8(x: number): this;
    writeInt16(x: number): this;
    writeUInt16(x: number): this;
    writeInt32(x: number): this;
    writeUInt32(x: number): this;
    writeInt64(x: bigint): this;
    writeUInt64(x: bigint): this;
    writeFloat(x: number): this;
    writeDouble(x: number): this;
    writeVarInt(x: number): this;
    writeVarLong(x: bigint): this;
    writePosition(x: number, y: number, z: number): PacketWriter;
    writePosition(pos: Position): PacketWriter;
    writeNBT(name: string | null, tag: nbt.Tag | null): this;
    encode(): Buffer;
}
