"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mcHexDigest = exports.mcPublicKeyToPem = exports.hasJoinedSession = exports.joinSession = void 0;
const node_fetch_1 = require("node-fetch");
const querystring = require("querystring");
async function joinSession(accessToken, selectedProfile, serverId) {
    const response = await node_fetch_1.default("https://sessionserver.mojang.com/session/minecraft/join", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            accessToken, selectedProfile, serverId
        })
    });
    return response.ok;
}
exports.joinSession = joinSession;
async function hasJoinedSession(username, serverId, ip) {
    const response = await node_fetch_1.default("https://sessionserver.mojang.com/session/minecraft/hasJoined?"
        + querystring.stringify({ username, serverId }));
    return response.ok;
}
exports.hasJoinedSession = hasJoinedSession;
function mcPublicKeyToPem(buffer) {
    let pem = "-----BEGIN PUBLIC KEY-----\n";
    let bpk = buffer.toString("base64");
    const maxLineLength = 65;
    while (bpk.length > 0) {
        pem += bpk.substring(0, maxLineLength) + "\n";
        bpk = bpk.substring(maxLineLength);
    }
    return pem + "-----END PUBLIC KEY-----\n";
}
exports.mcPublicKeyToPem = mcPublicKeyToPem;
function mcHexDigest(hash) {
    const isNegative = hash.readInt8(0) < 0;
    if (isNegative)
        performTwosCompliment(hash);
    let digest = hash.toString("hex");
    digest = digest.replace(/^0+/g, "");
    if (isNegative)
        digest = "-" + digest;
    return digest;
}
exports.mcHexDigest = mcHexDigest;
function performTwosCompliment(buffer) {
    let carry = true, newByte, value;
    for (let i = buffer.length - 1; i >= 0; --i) {
        value = buffer.readUInt8(i);
        newByte = ~value & 0xff;
        if (carry)
            carry = newByte == 0xff, buffer.writeUInt8(newByte + 1, i);
        else
            buffer.writeUInt8(newByte, i);
    }
}
