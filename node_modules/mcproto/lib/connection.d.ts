/// <reference types="node" />
import { Socket } from "net";
import { PacketReader, Packet } from "./packet";
import { Emitter } from "./events";
export declare enum State {
    Handshake = 0,
    Status = 1,
    Login = 2,
    Play = 3
}
interface Events {
    packet: (packet: PacketReader) => void;
    changeState: (state: number) => void;
    error: (error: any) => void;
    end: () => void;
}
export declare class Connection extends Emitter<Events> {
    socket: Socket;
    isServer: boolean;
    state: State;
    protocol: number;
    paused: boolean;
    private packets;
    private cipher?;
    private decipher?;
    private reader;
    private writer;
    constructor(socket: Socket, isServer?: boolean);
    onPacket(id: number, handler: (packet: PacketReader) => void): import("./events").Disposable;
    oncePacket(id: number, handler: (packet: PacketReader) => void): import("./events").Disposable;
    pause(): Promise<void>;
    resume(): Promise<void>;
    unpipe(): void;
    nextPacket(id?: number, expectNext?: boolean): Promise<PacketReader>;
    send(packet: Packet): Promise<void>;
    end(packet?: Packet): Promise<void>;
    setCompression(threshold: number): void;
    setEncryption(sharedSecret: Buffer): void;
    private setState;
    private packetReceived;
    protected emitError(error: Error): void;
}
export {};
