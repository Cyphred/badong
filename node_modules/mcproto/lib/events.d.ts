declare type Args<T> = [T] extends [(...args: infer U) => any] ? U : [T] extends [void] ? [] : [T];
export interface Disposable {
    dispose(): boolean;
}
export declare class Emitter<Events extends {
    [key in string]: any;
}> {
    protected handlers: Map<any, Set<(...args: any) => any>>;
    on<T extends keyof Events>(event: T, handler: Events[T]): Disposable;
    once<T extends keyof Events>(event: T, handler: Events[T]): Disposable;
    off<T extends keyof Events>(event: T, handler: Events[T]): boolean;
    removeListener: <T extends keyof Events>(event: T, handler: Events[T]) => boolean;
    emit<T extends keyof Events>(event: T, ...args: Args<Events[T]>): boolean;
}
export {};
